---
import { languages } from '../i18n/utils';

const { currentLang = 'es' } = Astro.props;
const base = import.meta.env.BASE_URL;
---

<div class="language-selector">
	<button class="lang-toggle" aria-label="Select language">
		<svg width="20" height="20" viewBox="0 0 20 20" fill="none">
			<path d="M10 2C5.58172 2 2 5.58172 2 10C2 14.4183 5.58172 18 10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2Z" stroke="currentColor" stroke-width="1.5"/>
			<path d="M2 10H18" stroke="currentColor" stroke-width="1.5"/>
			<path d="M10 2C11.6569 4.68629 12.5 7.66797 12.5 10C12.5 12.332 11.6569 15.3137 10 18C8.34315 15.3137 7.5 12.332 7.5 10C7.5 7.66797 8.34315 4.68629 10 2Z" stroke="currentColor" stroke-width="1.5"/>
		</svg>
		<span class="current-lang">{currentLang.toUpperCase()}</span>
	</button>
	<div class="lang-dropdown">
		{Object.entries(languages).map(([lang, label]) => (
			<a 
				href={lang === 'es' ? `${base}/` : `${base}/${lang}/`}
				class={`lang-option ${currentLang === lang ? 'active' : ''}`}
				data-lang={lang}
			>
				{label}
			</a>
		))}
	</div>
</div>

<style>
	.language-selector {
		position: relative;
	}

	.lang-toggle {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		background: none;
		border: 1px solid rgba(212, 175, 55, 0.3);
		color: var(--color-text);
		padding: 0.5rem 1rem;
		border-radius: 8px;
		cursor: pointer;
		font-size: 0.9rem;
		font-weight: 500;
		transition: all 0.3s ease;
	}

	.lang-toggle:hover {
		border-color: var(--color-accent);
		background: rgba(212, 175, 55, 0.05);
	}

	.lang-toggle svg {
		width: 18px;
		height: 18px;
	}

	.current-lang {
		font-family: var(--font-main);
		letter-spacing: 0.05em;
	}

	.lang-dropdown {
		position: absolute;
		top: calc(100% + 0.5rem);
		right: 0;
		background: rgba(13, 13, 13, 0.98);
		border: 1px solid rgba(212, 175, 55, 0.2);
		border-radius: 8px;
		overflow: hidden;
		opacity: 0;
		visibility: hidden;
		transform: translateY(-10px);
		transition: all 0.3s ease;
		min-width: 150px;
		box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
		z-index: 100;
	}

	.language-selector:hover .lang-dropdown {
		opacity: 1;
		visibility: visible;
		transform: translateY(0);
	}

	.lang-option {
		display: block;
		padding: 0.75rem 1rem;
		color: var(--color-text-light);
		text-decoration: none;
		transition: all 0.2s ease;
		font-size: 0.95rem;
		border-bottom: 1px solid rgba(212, 175, 55, 0.05);
	}

	.lang-option:last-child {
		border-bottom: none;
	}

	.lang-option:hover {
		background: rgba(212, 175, 55, 0.1);
		color: var(--color-accent);
		padding-left: 1.5rem;
	}

	.lang-option.active {
		color: var(--color-accent);
		background: rgba(212, 175, 55, 0.05);
	}

	@media (max-width: 768px) {
		.lang-toggle {
			padding: 0.4rem 0.8rem;
			font-size: 0.85rem;
		}

		.lang-toggle svg {
			width: 16px;
			height: 16px;
		}

		.lang-dropdown {
			right: 0;
			left: auto;
		}
	}
</style>

<script>
	// Touch support for mobile
	document.addEventListener('DOMContentLoaded', () => {
		const langToggle = document.querySelector('.lang-toggle');
		const langSelector = document.querySelector('.language-selector');
		
		if (langToggle && langSelector) {
			langToggle.addEventListener('click', (e) => {
				e.stopPropagation();
				langSelector.classList.toggle('open');
			});

			document.addEventListener('click', () => {
				langSelector.classList.remove('open');
			});
		}
	});
</script>

<style is:global>
	.language-selector.open .lang-dropdown {
		opacity: 1;
		visibility: visible;
		transform: translateY(0);
	}
</style>

