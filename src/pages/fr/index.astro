---
import Layout from '../../layouts/Layout.astro';
import SynapseReveal from '../../components/SynapseReveal.astro';
import { useTranslations } from '../../i18n/utils';

const base = import.meta.env.BASE_URL;
const t = useTranslations('fr');
---

<Layout title="arsomnia" lang="fr">
	<!-- Hero Section -->
	<section id="inicio" class="hero">
		<SynapseReveal />
		<div class="container hero-content" id="hero-content">
			<h1 class="hero-title" id="hero-title" set:html={t('hero.title')}>
			</h1>
			<p class="hero-subtitle" id="hero-subtitle" set:html={t('hero.subtitle')}>
			</p>
			<div class="hero-buttons">
				<a href="#proyectos" class="btn btn-primary">
					{t('hero.cta_primary')}
					<svg width="20" height="20" viewBox="0 0 20 20" fill="none">
						<path d="M7.5 15L12.5 10L7.5 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
					</svg>
				</a>
				<a href="#contacto" class="btn btn-secondary">{t('hero.cta_secondary')}</a>
			</div>
		</div>
	</section>

	<script>
		// Efecto líquido puntual: solo afecta letras cerca del cursor
		const hero = document.querySelector<HTMLElement>('.hero');
		const heroTitle = document.getElementById('hero-title');
		const heroSubtitle = document.getElementById('hero-subtitle');
		let lastMouseMove = 0;
		let animationId = 0;
		
		// Dividir texto en palabras y luego en caracteres para efecto puntual
		// Esto permite que CSS rompa líneas entre palabras, no entre letras
		function wrapChars(el: HTMLElement | null) {
			if (!el || el.dataset.wrapped === '1') return;
			// Préserver les <br> provenant des traductions JSON
			const html = el.innerHTML || '';
			const text = html.replace(/<br\s*\/?>(\s*)/gi, '\n');
			el.innerHTML = '';
			el.dataset.wrapped = '1';
			
			// Dividir por saltos de línea primero
			const lines = text.split('\n');
			
			lines.forEach((line, lineIndex) => {
				if (lineIndex > 0) {
					el.appendChild(document.createElement('br'));
				}
				
				// Dividir cada línea en palabras
				const words = line.split(' ');
				
				words.forEach((word, wordIndex) => {
					if (wordIndex > 0) {
						// Añadir espacio entre palabras
						el.appendChild(document.createTextNode(' '));
					}
					
					// Crear un span para la palabra (permite line-break)
					const wordSpan = document.createElement('span');
					wordSpan.className = 'word';
					wordSpan.style.display = 'inline-block';
					wordSpan.style.whiteSpace = 'nowrap'; // Evita que la palabra se rompa
					
					// Envolver cada letra de la palabra
					for (const char of word) {
						const charSpan = document.createElement('span');
						charSpan.className = 'char';
						charSpan.textContent = char;
						charSpan.style.display = 'inline-block';
						charSpan.style.willChange = 'transform, filter';
						wordSpan.appendChild(charSpan);
					}
					
					el.appendChild(wordSpan);
				});
			});
		}
		
		wrapChars(heroTitle);
		wrapChars(heroSubtitle);
		
		const chars = [
			...Array.from(heroTitle?.querySelectorAll('.char') || []) as HTMLElement[],
			...Array.from(heroSubtitle?.querySelectorAll('.char') || []) as HTMLElement[]
		];
		
		let mouseX = -1000;
		let mouseY = -1000;
		
		function updateLiquidEffect() {
			const now = performance.now();
			const timeSinceMove = now - lastMouseMove;
			
			// Efecto puntual SOLO en caracteres cerca del cursor
			const INFLUENCE_RADIUS = 120; // Radio de influencia aumentado
			const MAX_DISTORTION = 1.0; // Intensidad de la distorsión
			
			chars.forEach(char => {
				const rect = char.getBoundingClientRect();
				const charX = rect.left + rect.width / 2;
				const charY = rect.top + rect.height / 2;
				
				const dx = charX - mouseX;
				const dy = charY - mouseY;
				const distance = Math.sqrt(dx * dx + dy * dy);
				
				if (distance < INFLUENCE_RADIUS && timeSinceMove < 2000) {
					// Calcular influencia: 1 cuando está en el centro, 0 en el borde
					const influence = 1 - (distance / INFLUENCE_RADIUS);
					const distortion = influence * MAX_DISTORTION;
					
					// Empujar las letras hacia afuera desde el cursor (efecto de repulsión)
					const offsetX = (dx / distance) * distortion * 8; // Mayor desplazamiento
					const offsetY = (dy / distance) * distortion * 8; // Mayor desplazamiento
					const blur = influence * 1.5; // Mayor desenfoque
					
					char.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
					char.style.filter = `blur(${blur}px)`;
				} else {
					// Letras fuera del radio o sin movimiento reciente
					char.style.transform = 'none';
					char.style.filter = 'none';
				}
			});
			
			// Continuar animando solo si el cursor se movió recientemente
			if (timeSinceMove < 2500) {
				animationId = requestAnimationFrame(updateLiquidEffect);
			} else {
				animationId = 0;
			}
		}
		
		if (hero && window.matchMedia("(min-width: 769px)").matches) {
			// NO aplicar filtro SVG al contenido (solo efecto puntual en caracteres)
			
			hero.addEventListener('mousemove', (e: MouseEvent) => {
				mouseX = e.clientX;
				mouseY = e.clientY;
				lastMouseMove = performance.now();
				
				if (!animationId) {
					animationId = requestAnimationFrame(updateLiquidEffect);
				}
			}, { passive: true });
			
			hero.addEventListener('mouseleave', () => {
				mouseX = -1000;
				mouseY = -1000;
			}, { passive: true });
		}
	</script>

	<!-- About Section -->
	<section id="acerca" class="about">
		<div class="container">
			<div class="about-hero">
				<figure class="about-portrait-large">
					<img
						src={`${base}/sergio_corcuera.jpeg`}
						alt="Portrait de Sergio Corcuera"
						loading="lazy"
						decoding="async"
					/>
				</figure>
				<div class="about-intro">
					<h2 class="about-headline" set:html={t('about.headline')}>
					</h2>
					<p class="about-bio">
						{t('about.bio')}
					</p>
					<a href="#contacto" class="btn btn-primary btn-cta">
						{t('about.cta')}
						<svg width="20" height="20" viewBox="0 0 20 20" fill="none">
							<path d="M7.5 15L12.5 10L7.5 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
					</a>
				</div>
			</div>

			<div class="about-approach">
				<h3 class="approach-title">{t('about.approach_title')}</h3>
				<div class="approach-grid">
					<div class="approach-item">
						<div class="approach-number">01</div>
						<h4 class="approach-subtitle">{t('about.approach_1_title')}</h4>
						<p class="approach-text">
							{t('about.approach_1_text')}
						</p>
					</div>
					<div class="approach-item">
						<div class="approach-number">02</div>
						<h4 class="approach-subtitle">{t('about.approach_2_title')}</h4>
						<p class="approach-text">
							{t('about.approach_2_text')}
						</p>
					</div>
					<div class="approach-item">
						<div class="approach-number">03</div>
						<h4 class="approach-subtitle">{t('about.approach_3_title')}</h4>
						<p class="approach-text">
							{t('about.approach_3_text')}
						</p>
					</div>
				</div>
			</div>
		</div>
	</section>

	<!-- Projects Section -->
	<section id="proyectos" class="projects">
		<div class="container">
			<div class="section-header">
				<h2 class="section-title-center">{t('projects.title')}</h2>
				<p class="section-subtitle">
					{t('projects.subtitle')}
				</p>
			</div>
		<div class="projects-grid">
			<a href="https://www.elnectar.io/" target="_blank" rel="noopener noreferrer" class="project-card">
				<div class="project-image" style={`background-image: url('${base}/nectario.png');`}>
				</div>
				<div class="project-info">
					<div class="project-header">
						<div>
							<h3 class="project-name">{t('projects.nectario.name')}</h3>
							<p class="project-category">{t('projects.nectario.category')}</p>
						</div>
						<svg width="20" height="20" viewBox="0 0 20 20" fill="none">
							<path d="M5 15L15 5M15 5H8M15 5V12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
					</div>
					<p class="project-description">
						{t('projects.nectario.description')}
					</p>
				</div>
			</a>
			<a href="https://www.buscando-a-hopper.com/" target="_blank" rel="noopener noreferrer" class="project-card">
				<div class="project-image" style={`background-image: url('${base}/hopper.png');`}>
				</div>
				<div class="project-info">
					<div class="project-header">
						<div>
							<h3 class="project-name">{t('projects.hopper.name')}</h3>
							<p class="project-category">{t('projects.hopper.category')}</p>
						</div>
						<svg width="20" height="20" viewBox="0 0 20 20" fill="none">
							<path d="M5 15L15 5M15 5H8M15 5V12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
					</div>
					<p class="project-description">
						{t('projects.hopper.description')}
					</p>
				</div>
			</a>
			<a href="https://vagari.world/" target="_blank" rel="noopener noreferrer" class="project-card">
				<div class="project-image" style={`background-image: url('${base}/vagari.jpg');`}>
				</div>
				<div class="project-info">
					<div class="project-header">
						<div>
							<h3 class="project-name">{t('projects.vagari.name')}</h3>
							<p class="project-category">{t('projects.vagari.category')}</p>
						</div>
						<svg width="20" height="20" viewBox="0 0 20 20" fill="none">
							<path d="M5 15L15 5M15 5H8M15 5V12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
					</div>
					<p class="project-description">
						{t('projects.vagari.description')}
					</p>
				</div>
			</a>
		</div>
		</div>
	</section>

	<!-- Contact Section -->
	<section id="contacto" class="contact">
		<div class="container">
			<div class="contact-content">
				<div class="contact-header">
					<h2 class="section-title-center">{t('contact.title')}</h2>
					<p class="section-subtitle">
						{t('contact.subtitle')}
					</p>
				</div>

				<form id="contact-form" class="contact-form" action="https://formspree.io/f/mgvplpyr" method="POST">
					<!-- Honeypot field for spam protection -->
					<input type="text" name="_gotcha" style="display:none" />

					<div class="form-row">
						<div class="form-group">
							<label for="name">{t('contact.form.name')}</label>
							<input type="text" id="name" name="name" placeholder={t('contact.form.name_placeholder')} required />
						</div>
						<div class="form-group">
							<label for="email">{t('contact.form.email')}</label>
							<input type="email" id="email" name="email" placeholder={t('contact.form.email_placeholder')} required />
						</div>
					</div>
					<div class="form-group">
						<label for="project-type">{t('contact.form.project_type')}</label>
						<select id="project-type" name="project-type" required>
							<option value="">{t('contact.form.project_type_placeholder')}</option>
							<option value="portfolio">{t('contact.form.project_type_portfolio')}</option>
							<option value="corporate">{t('contact.form.project_type_corporate')}</option>
							<option value="other">{t('contact.form.project_type_other')}</option>
						</select>
					</div>
					<div class="form-group">
						<label for="message">{t('contact.form.message')}</label>
						<textarea id="message" name="message" rows="6" placeholder={t('contact.form.message_placeholder')} required></textarea>
					</div>
					<button type="submit" id="contact-submit-btn" class="btn btn-primary btn-full">{t('contact.form.submit')}</button>
				</form>
				<p id="form-status" class="form-status"></p>
			</div>
		</div>
	</section>

	<script>
		// Form Submission Handler
		const form = document.getElementById('contact-form') as HTMLFormElement;
		const statusEl = document.getElementById('form-status');
		const submitBtn = document.getElementById('contact-submit-btn');

		async function handleSubmit(event: Event) {
			event.preventDefault();
			if (!form || !statusEl || !submitBtn) return;

			const formData = new FormData(event.target as HTMLFormElement);
			submitBtn.textContent = 'Envoi en cours...';
			submitBtn.setAttribute('disabled', 'true');
			statusEl.textContent = '';
			statusEl.className = 'form-status';

			try {
				const response = await fetch(form.action, {
					method: form.method,
					body: formData,
					headers: {
						'Accept': 'application/json'
					}
				});

				if (response.ok) {
					statusEl.textContent = "Merci pour votre message ! Je vous répondrai bientôt.";
					statusEl.classList.add('success');
					form.reset();
				} else {
					const data = await response.json();
					statusEl.textContent = data.error || 'Oups ! Un problème est survenu lors de l\'envoi du formulaire.';
					statusEl.classList.add('error');
				}
			} catch (error) {
				statusEl.textContent = 'Oups ! Un problème de réseau est survenu.';
				statusEl.classList.add('error');
			} finally {
				submitBtn.textContent = 'Envoyer le Message';
				submitBtn.removeAttribute('disabled');
			}
		}

		form?.addEventListener('submit', handleSubmit);
	</script>

	<!-- Footer -->
	<footer class="footer">
		<div class="container">
			<div class="footer-content">
				<p class="footer-text">© 2025 arsomnia</p>
			</div>
		</div>
	</footer>
</Layout>

<style>
	.container {
		max-width: 1400px;
		margin: 0 auto;
		padding: 0 2rem;
	}

	/* Hero Section */
	.hero {
		min-height: 90vh;
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		padding: 4rem 0;
		position: relative;
		overflow: hidden;
		contain: layout style paint;
	}

	.hero-content {
		position: relative;
		z-index: 10;
	}

	.hero-title {
		font-size: 5rem;
		font-weight: 700;
		line-height: 1.1;
		margin-bottom: 2rem;
		color: var(--color-text);
	}

	.hero-title .char {
		display: inline-block;
		transition: transform 0.1s ease, filter 0.1s ease;
	}

	.hero-title-accent {
		color: var(--color-accent);
	}

	.hero-subtitle {
		font-size: 1.25rem;
		color: var(--color-text-light);
		margin-bottom: 3rem;
		line-height: 1.8;
	}

	.hero-subtitle .char {
		display: inline-block;
		transition: transform 0.1s ease, filter 0.1s ease;
	}

	.hero-buttons {
		display: flex;
		gap: 1.5rem;
		justify-content: center;
		align-items: center;
	}

	.btn {
		padding: 1rem 2rem;
		border-radius: 8px;
		text-decoration: none;
		font-weight: 500;
		font-size: 1rem;
		transition: all 0.3s ease;
		display: inline-flex;
		align-items: center;
		gap: 0.5rem;
		border: none;
		cursor: pointer;
		will-change: transform;
	}

	.btn-primary {
		background: var(--color-accent);
		color: var(--color-bg);
		font-weight: 600;
	}

	.btn-primary:hover {
		background: #B8962E;
		color: var(--color-bg);
		transform: translateY(-2px);
		box-shadow: 0 8px 16px rgba(212, 175, 55, 0.4);
	}

	.btn-secondary {
		background: transparent;
		color: var(--color-text);
		border: 2px solid var(--color-accent);
	}

	.btn-secondary:hover {
		background: var(--color-accent);
		color: var(--color-bg);
		box-shadow: 0 8px 16px rgba(212, 175, 55, 0.3);
	}

	.btn-full {
		width: 100%;
		justify-content: center;
	}

	/* About Section */
	.about {
		padding: 8rem 0;
		background: var(--color-bg-secondary);
	}

	/* About Hero Section */
	.about-hero {
		display: grid;
		grid-template-columns: 38% 1fr;
		gap: 5rem;
		align-items: center;
		margin-bottom: 8rem;
	}

	.about-portrait-large {
		width: 100%;
		max-width: 380px;
		margin: 0;
		border-radius: 16px;
		overflow: hidden;
		border: 1px solid rgba(212, 175, 55, 0.1);
		box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
		position: relative;
	}

	.about-portrait-large::after {
		content: '';
		position: absolute;
		inset: 0;
		background: linear-gradient(135deg, rgba(212, 175, 55, 0.05) 0%, transparent 50%);
		pointer-events: none;
	}

	.about-portrait-large img {
		display: block;
		width: 100%;
		height: auto;
		aspect-ratio: 3 / 4;
		object-fit: cover;
		filter: saturate(1.05) contrast(1.05);
		transition: transform 0.6s ease;
	}

	.about-portrait-large:hover img {
		transform: scale(1.03);
	}

	.about-intro {
		display: flex;
		flex-direction: column;
		gap: 2rem;
	}

	.about-headline {
		font-size: 2.75rem;
		font-weight: 700;
		line-height: 1.3;
		color: var(--color-text);
		font-family: var(--font-main);
		letter-spacing: -0.02em;
	}

	.about-bio {
		font-size: 1.15rem;
		line-height: 1.75;
		color: var(--color-text-light);
		max-width: 600px;
		font-weight: 400;
	}

	.btn-cta {
		display: inline-flex;
		align-items: center;
		align-self: flex-start;
		font-size: 1.1rem;
		padding: 1rem 2rem;
		box-shadow: 0 8px 24px rgba(212, 175, 55, 0.3);
	}

	.btn-cta:hover {
		box-shadow: 0 12px 32px rgba(212, 175, 55, 0.4);
		transform: translateY(-2px);
	}

	/* About Approach Section */
	.about-approach {
		border-top: 1px solid rgba(212, 175, 55, 0.1);
		padding-top: 5rem;
	}

	.approach-title {
		text-align: center;
		margin-bottom: 4rem;
		text-transform: uppercase;
		letter-spacing: 0.15em;
		font-size: 1rem;
		font-weight: 600;
		color: var(--color-accent);
		font-family: var(--font-main);
	}

	.approach-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 4rem;
	}

	.approach-item {
		text-align: left;
		position: relative;
	}

	.approach-number {
		font-size: 3.5rem;
		font-weight: 700;
		color: rgba(212, 175, 55, 0.12);
		line-height: 1;
		margin-bottom: 1rem;
		font-family: var(--font-main);
	}

	.approach-subtitle {
		font-size: 1.35rem;
		font-weight: 600;
		margin-bottom: 0.75rem;
		color: var(--color-text);
		font-family: var(--font-main);
	}

	.approach-text {
		color: var(--color-text-light);
		line-height: 1.7;
		font-size: 1rem;
		font-family: var(--font-main);
	}

	/* Legacy styles for other sections */
	.section-title {
		font-size: 3.5rem;
		font-weight: 700;
		line-height: 1.2;
		margin-bottom: 2rem;
		color: var(--color-text);
	}

	/* Projects Section */
	.projects {
		padding: 8rem 0;
	}

	.section-header {
		text-align: center;
		margin-bottom: 4rem;
	}

	.section-title-center {
		font-size: 3.5rem;
		font-weight: 700;
		margin-bottom: 1rem;
		color: var(--color-text);
	}

	.section-subtitle {
		font-size: 1.2rem;
		color: var(--color-text-light);
	}

	.projects-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 2rem;
	}

	.project-card {
		background: var(--color-bg-secondary);
		border-radius: 16px;
		overflow: hidden;
		transition: transform 0.3s ease, box-shadow 0.3s ease;
		cursor: pointer;
		text-decoration: none;
		color: inherit;
		display: block;
		border: 1px solid rgba(212, 175, 55, 0.1);
		will-change: transform;
	}

	.project-card:hover {
		transform: translateY(-8px);
		box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6);
		border-color: rgba(212, 175, 55, 0.3);
	}

	.project-image {
		height: 300px;
		display: flex;
		align-items: center;
		justify-content: center;
		color: rgba(255, 255, 255, 0.5);
		background-size: cover;
		background-position: center;
	}

	.project-placeholder {
		opacity: 0.5;
	}

	.project-info {
		padding: 2rem;
	}

	.project-header {
		display: flex;
		justify-content: space-between;
		align-items: start;
		margin-bottom: 1rem;
	}

	.project-name {
		font-size: 1.25rem;
		font-weight: 600;
		margin-bottom: 0.25rem;
		color: var(--color-text);
	}

	.project-category {
		font-size: 0.95rem;
		color: var(--color-accent);
		margin-bottom: 0.5rem;
	}

	.project-description {
		font-size: 0.95rem;
		color: var(--color-text-light);
		line-height: 1.6;
	}

	/* Contact Section */
	.contact {
		padding: 8rem 0;
		background: var(--color-bg-secondary);
	}

	.contact-content {
		max-width: 900px;
		margin: 0 auto;
	}

	.contact-header {
		text-align: center;
		margin-bottom: 4rem;
	}

	.contact-info-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 2rem;
		margin-bottom: 4rem;
	}

	.contact-info-card {
		text-align: center;
		padding: 2rem;
		background: var(--color-accent-secondary);
		border-radius: 12px;
		border: 1px solid rgba(212, 175, 55, 0.1);
	}

	.contact-info-icon {
		width: 56px;
		height: 56px;
		background: var(--color-accent);
		color: var(--color-bg);
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		margin: 0 auto 1rem;
	}

	.contact-info-card h3 {
		font-size: 1.1rem;
		font-weight: 600;
		margin-bottom: 0.5rem;
		color: var(--color-text);
	}

	.contact-info-card p {
		font-size: 0.95rem;
		color: var(--color-text-light);
	}

	.contact-form {
		background: var(--color-accent-secondary);
		padding: 3rem;
		border-radius: 16px;
		border: 1px solid rgba(212, 175, 55, 0.1);
	}

	.form-status {
		text-align: center;
		margin-top: 1.5rem;
		min-height: 1.5rem;
		font-weight: 500;
		transition: color 0.3s ease;
	}

	.form-status.success {
		color: #4CAF50; /* Verde éxito */
	}

	.form-status.error {
		color: #F44336; /* Rojo error */
	}

	.form-row {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1.5rem;
		margin-bottom: 1.5rem;
	}

	.form-group {
		margin-bottom: 1.5rem;
	}

	.form-group label {
		display: block;
		font-weight: 500;
		margin-bottom: 0.5rem;
		color: var(--color-text);
	}

	.form-group input,
	.form-group select,
	.form-group textarea {
		width: 100%;
		padding: 1rem;
		border: 1px solid rgba(212, 175, 55, 0.2);
		border-radius: 8px;
		font-size: 1rem;
		font-family: var(--font-main);
		background: var(--color-bg);
		color: var(--color-text);
		transition: border-color 0.3s ease;
	}

	.form-group input:focus,
	.form-group select:focus,
	.form-group textarea:focus {
		outline: none;
		border-color: var(--color-accent);
	}

	.form-group textarea {
		resize: vertical;
	}

	/* Footer */
	.footer {
		padding: 3rem 0;
		border-top: 1px solid rgba(212, 175, 55, 0.2);
	}

	.footer-content {
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.footer-text {
		color: var(--color-text-light);
		font-size: 0.95rem;
	}

	.footer-links {
		display: flex;
		gap: 2rem;
	}

	.footer-links a {
		color: var(--color-text-light);
		text-decoration: none;
		font-size: 0.95rem;
		transition: color 0.3s ease;
	}

	.footer-links a:hover {
		color: var(--color-accent);
	}

	/* Responsive Design */
	@media (max-width: 1024px) {
		.hero-title {
			font-size: 4rem;
		}

		.section-title,
		.section-title-center {
			font-size: 2.5rem;
		}

		.about-content {
			gap: 4rem;
		}

		.projects-grid {
			grid-template-columns: repeat(2, 1fr);
		}
	}

	@media (max-width: 768px) {
		.container {
			padding: 0 1.5rem;
		}

		.hero {
			min-height: 80vh;
			padding: 3rem 0;
		}

		.hero-title {
			font-size: 2.5rem;
		}

		.hero-subtitle {
			font-size: 1.1rem;
		}

		.hero-subtitle br {
			display: none;
		}

		.hero-buttons {
			flex-direction: column;
			width: 100%;
		}

		.btn {
			width: 100%;
			justify-content: center;
		}

		.about {
			padding: 5rem 0;
		}

		.about-hero {
			grid-template-columns: 1fr;
			gap: 3rem;
			margin-bottom: 5rem;
		}

		.about-portrait-large {
			max-width: 300px;
			margin: 0 auto;
		}

		.about-intro {
			text-align: center;
			align-items: center;
		}

		.about-headline {
			font-size: 1.85rem;
			letter-spacing: -0.01em;
		}

		.about-headline br {
			display: none;
		}

		.about-bio {
			font-size: 1.05rem;
			line-height: 1.7;
		}

		.btn-cta {
			width: 100%;
			justify-content: center;
		}

		.approach-title {
			font-size: 0.85rem;
			margin-bottom: 3rem;
		}

		.approach-grid {
			grid-template-columns: 1fr;
			gap: 3rem;
		}

		.approach-item {
			text-align: center;
		}

		.approach-number {
			font-size: 2.5rem;
		}

		.approach-subtitle {
			font-size: 1.2rem;
		}

		.approach-text {
			font-size: 0.95rem;
		}

		.section-title,
		.section-title-center {
			font-size: 2rem;
		}

		.projects {
			padding: 5rem 0;
		}

		.projects-grid {
			grid-template-columns: 1fr;
		}

		.contact {
			padding: 5rem 0;
		}

		.contact-info-grid {
			grid-template-columns: 1fr;
			gap: 1.5rem;
		}

		.contact-form {
			padding: 2rem 1.5rem;
		}

		.form-row {
			grid-template-columns: 1fr;
		}

		.footer-content {
			flex-direction: column;
			gap: 1.5rem;
			text-align: center;
		}

		.footer-links {
			flex-direction: column;
			gap: 1rem;
		}
	}

	@media (max-width: 480px) {
		.hero-title {
			font-size: 2rem;
		}

		.hero-subtitle {
			font-size: 1rem;
		}

		.section-title,
		.section-title-center {
			font-size: 1.75rem;
		}

		.project-image {
			height: 200px;
		}
	}
</style>
